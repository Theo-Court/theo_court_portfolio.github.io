{"ast":null,"code":"import * as r from \"three\";\nconst g = 50,\n  _ = 80,\n  T = !0,\n  C = 5,\n  V = new r.Clock(),\n  E = U();\nclass X {\n  _ref;\n  _speed = -1;\n  _horizontalPressure = -1;\n  _verticalPressure = -1;\n  _waveFrequencyX = -1;\n  _waveFrequencyY = -1;\n  _waveAmplitude = -1;\n  _shadows = -1;\n  _highlights = -1;\n  _saturation = -1;\n  _brightness = -1;\n  _colorBlending = -1;\n  _colors = [];\n  _wireframe = !1;\n  _backgroundColor = \"#FFFFFF\";\n  _backgroundAlpha = 1;\n  requestRef = -1;\n  sizeObserver;\n  sceneState;\n  constructor(e) {\n    const {\n      ref: o,\n      speed: i = 4,\n      horizontalPressure: n = 3,\n      verticalPressure: a = 3,\n      waveFrequencyX: c = 5,\n      waveFrequencyY: u = 5,\n      waveAmplitude: x = 3,\n      colors: l,\n      highlights: v = 4,\n      shadows: m = 4,\n      colorSaturation: p = 0,\n      colorBrightness: w = 1,\n      colorBlending: b = 5,\n      wireframe: I = !1,\n      backgroundColor: N = \"#FFFFFF\",\n      backgroundAlpha: O = 1,\n      resolution: R = 1,\n      seed: q\n    } = e;\n    this._ref = o, this.destroy = this.destroy.bind(this), this._initScene = this._initScene.bind(this), this._buildMaterial = this._buildMaterial.bind(this), this.speed = i, this.horizontalPressure = n, this.verticalPressure = a, this.waveFrequencyX = c, this.waveFrequencyY = u, this.waveAmplitude = x, this.colorBlending = b, this.colors = l, this.shadows = m, this.highlights = v, this.colorSaturation = p, this.colorBrightness = w, this.wireframe = I, this.backgroundColor = N, this.backgroundAlpha = O, this.sceneState = this._initScene(R);\n    let z = q !== void 0 ? q : G();\n    const S = () => {\n        const {\n          renderer: h,\n          camera: f,\n          scene: d,\n          meshes: y\n        } = this.sceneState;\n        Math.floor(z * 10) % 5 === 0 && W(o), h.setClearColor(this._backgroundColor, this._backgroundAlpha), y.forEach(s => {\n          const K = this._ref.width,\n            D = this._ref.height,\n            L = [...this._colors.map(P => ({\n              is_active: P.enabled,\n              color: new r.Color(P.color),\n              influence: P.influence\n            })), ...Array.from({\n              length: C - this._colors.length\n            }).map(() => ({\n              is_active: !1,\n              color: new r.Color(0)\n            }))];\n          z += V.getDelta() * this._speed, s.material.uniforms.u_time.value = z, s.material.uniforms.u_resolution = {\n            value: new r.Vector2(K, D)\n          }, s.material.uniforms.u_color_pressure = {\n            value: new r.Vector2(this._horizontalPressure, this._verticalPressure)\n          }, s.material.uniforms.u_wave_frequency_x = {\n            value: this._waveFrequencyX\n          }, s.material.uniforms.u_wave_frequency_y = {\n            value: this._waveFrequencyY\n          }, s.material.uniforms.u_wave_amplitude = {\n            value: this._waveAmplitude\n          }, s.material.uniforms.u_plane_width = {\n            value: g\n          }, s.material.uniforms.u_plane_height = {\n            value: _\n          }, s.material.uniforms.u_color_blending = {\n            value: this._colorBlending\n          }, s.material.uniforms.u_colors = {\n            value: L\n          }, s.material.uniforms.u_colors_count = {\n            value: C\n          }, s.material.uniforms.u_shadows = {\n            value: this._shadows\n          }, s.material.uniforms.u_highlights = {\n            value: this._highlights\n          }, s.material.uniforms.u_saturation = {\n            value: this._saturation\n          }, s.material.uniforms.u_brightness = {\n            value: this._brightness\n          }, s.material.wireframe = this._wireframe;\n        }), h.render(d, f), this.requestRef = requestAnimationFrame(S);\n      },\n      B = () => {\n        const {\n            renderer: h\n          } = this.sceneState,\n          f = h.domElement,\n          d = f.clientWidth,\n          y = f.clientHeight;\n        this.sceneState.renderer.setSize(d, y, !1), F(this.sceneState.camera, d, y);\n      };\n    this.sizeObserver = new ResizeObserver(h => {\n      B();\n    }), this.sizeObserver.observe(o), S();\n  }\n  destroy() {\n    this && (cancelAnimationFrame(this.requestRef), this.sizeObserver.disconnect());\n  }\n  set speed(e) {\n    this._speed = e / 20;\n  }\n  set horizontalPressure(e) {\n    this._horizontalPressure = e / 4;\n  }\n  set verticalPressure(e) {\n    this._verticalPressure = e / 4;\n  }\n  set waveFrequencyX(e) {\n    this._waveFrequencyX = e * 0.04;\n  }\n  set waveFrequencyY(e) {\n    this._waveFrequencyY = e * 0.04;\n  }\n  set waveAmplitude(e) {\n    this._waveAmplitude = e * 0.75;\n  }\n  set colors(e) {\n    this._colors = e;\n  }\n  set highlights(e) {\n    this._highlights = e / 100;\n  }\n  set shadows(e) {\n    this._shadows = e / 100;\n  }\n  set colorSaturation(e) {\n    this._saturation = e / 10;\n  }\n  set colorBrightness(e) {\n    this._brightness = e;\n  }\n  set colorBlending(e) {\n    this._colorBlending = e / 10;\n  }\n  set wireframe(e) {\n    this._wireframe = e;\n  }\n  set resolution(e) {\n    this.sceneState = this._initScene(e);\n  }\n  set backgroundColor(e) {\n    this._backgroundColor = e;\n  }\n  set backgroundAlpha(e) {\n    this._backgroundAlpha = e;\n  }\n  _initScene(e) {\n    const o = this._ref.width,\n      i = this._ref.height,\n      n = new r.WebGLRenderer({\n        alpha: !0,\n        canvas: this._ref\n      });\n    n.setClearColor(16711680, 0.5), n.setSize(o, i, !1);\n    const a = [],\n      c = new r.Scene(),\n      u = this._buildMaterial(o, i),\n      x = new r.PlaneGeometry(g, _, 240 * e, 240 * e),\n      l = new r.Mesh(x, u);\n    l.rotation.x = -Math.PI / 3.5, l.position.z = -1, a.push(l), c.add(l);\n    const v = new r.OrthographicCamera(0, 0, 0, 0, 0, 0);\n    return v.position.z = 5, F(v, o, i), {\n      renderer: n,\n      camera: v,\n      scene: c,\n      meshes: a,\n      resolution: e\n    };\n  }\n  _buildMaterial(e, o) {\n    const i = [...this._colors.map(c => ({\n        is_active: c.enabled,\n        color: new r.Color(c.color),\n        influence: c.influence\n      })), ...Array.from({\n        length: C - this._colors.length\n      }).map(() => ({\n        is_active: !1,\n        color: new r.Color(0)\n      }))],\n      n = {\n        u_time: {\n          value: 0\n        },\n        u_color_pressure: {\n          value: new r.Vector2(this._horizontalPressure, this._verticalPressure)\n        },\n        u_wave_frequency_x: {\n          value: this._waveFrequencyX\n        },\n        u_wave_frequency_y: {\n          value: this._waveFrequencyY\n        },\n        u_wave_amplitude: {\n          value: this._waveAmplitude\n        },\n        u_resolution: {\n          value: new r.Vector2(e, o)\n        },\n        u_colors: {\n          value: i\n        },\n        u_colors_count: {\n          value: this._colors.length\n        },\n        u_plane_width: {\n          value: g\n        },\n        u_plane_height: {\n          value: _\n        },\n        u_shadows: {\n          value: this._shadows\n        },\n        u_highlights: {\n          value: this._highlights\n        }\n      },\n      a = new r.ShaderMaterial({\n        uniforms: n,\n        vertexShader: A() + H() + M() + j(),\n        fragmentShader: A() + M() + Y()\n      });\n    return a.wireframe = T, a;\n  }\n}\nfunction F(t, e, o) {\n  const a = e * o / 1e6 * g * _ / 1.5,\n    c = e / o,\n    u = Math.sqrt(a * c),\n    x = a / u,\n    l = -g / 2,\n    v = Math.min((l + u) / 1.5, g / 2),\n    m = _ / 4,\n    p = Math.max((m - x) / 2, -_ / 4),\n    w = -100,\n    b = 1e3;\n  t instanceof r.OrthographicCamera ? (t.left = l, t.right = v, t.top = m, t.bottom = p, t.near = w, t.far = b, t.updateProjectionMatrix()) : t instanceof r.PerspectiveCamera && (t.aspect = e / o, t.updateProjectionMatrix());\n}\nfunction j() {\n  return `\n\nvoid main() {\n\n    vUv = uv;\n\n    v_displacement_amount = cnoise( vec3(\n        u_wave_frequency_x * position.x + u_time,\n        u_wave_frequency_y * position.y + u_time,\n        u_time\n    ));\n    \n    vec3 color;\n\n    // float t = mod(u_base_color, 100.0);\n    color = u_colors[0].color;\n    \n    vec2 noise_cord = vUv * u_color_pressure;\n    \n    const float minNoise = .0;\n    const float maxNoise = .9;\n    \n    for (int i = 1; i < u_colors_count; i++) {\n    \n        if(u_colors[i].is_active == 1.0){\n            float noiseFlow = (1. + float(i)) / 30.;\n            float noiseSpeed = (1. + float(i)) * 0.11;\n            float noiseSeed = 13. + float(i) * 7.;\n            \n            float noise = snoise(\n                vec3(\n                    noise_cord.x * u_color_pressure.x + u_time * noiseFlow * 2.,\n                    noise_cord.y * u_color_pressure.y,\n                    u_time * noiseSpeed\n                ) + noiseSeed\n            );\n            \n            noise = clamp(minNoise, maxNoise + float(i) * 0.02, noise);\n            vec3 nextColor = u_colors[i].color;\n            \n            // vec3 colorOklab = oklab2rgb(color);\n            // vec3 nextColorOklab = oklab2rgb(nextColor);\n            // vec3 mixColor = mix(colorOklab, nextColorOklab, smoothstep(0.0, u_color_blending, noise));\n            //\n            // color = rgb2oklab(mixColor);\n            \n            color = mix(color, nextColor, smoothstep(0.0, u_color_blending, noise));\n        }\n        \n    }\n    \n    v_color = color;\n    \n    vec3 newPosition = position + normal * v_displacement_amount * u_wave_amplitude;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( newPosition, 1.0 );\n    \n    v_new_position = gl_Position;\n}\n`;\n}\nfunction Y() {\n  return `\n\nvoid main(){\n    vec3 color = v_color;\n    \n    color.rgb += pow(v_displacement_amount, 1.0) * u_highlights;\n    color.rgb -= pow(1.0 - v_displacement_amount, 2.0) * u_shadows;\n    color = saturation(color, 1.0 + u_saturation);\n    color = color * u_brightness;\n    \n    gl_FragColor = vec4(color,1.0);\n}\n`;\n}\nconst A = () => `\nprecision highp float;\n\nstruct Color {\n    float is_active;\n    vec3 color;\n    float value;\n};\n\nuniform float u_time;\n\nuniform float u_wave_amplitude;\nuniform float u_wave_frequency_x;\nuniform float u_wave_frequency_y;\n\nuniform vec2 u_color_pressure;\n\nuniform float u_plane_width;\nuniform float u_plane_height;\n\nuniform float u_shadows;\nuniform float u_highlights;\nuniform float u_saturation;\nuniform float u_brightness;\n\nuniform float u_color_blending;\n\nuniform int u_colors_count;\nuniform Color u_colors[5];\nuniform vec2 u_resolution;\n\nvarying vec2 vUv;\nvarying vec4 v_new_position;\nvarying vec3 v_color;\nvarying float v_displacement_amount;\n\n    `,\n  H = () => `\n\nvec3 mod289(vec3 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec3 fade(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\nfloat snoise(vec3 v)\n{\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i);\n  vec4 p = permute( permute( permute(\n            i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n          + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n          + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\n// Classic Perlin noise\nfloat cnoise(vec3 P)\n{\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n  return 2.2 * n_xyz;\n}\n\n// YUV to RGB matrix\nmat3 yuv2rgb = mat3(1.0, 0.0, 1.13983,\n                    1.0, -0.39465, -0.58060,\n                    1.0, 2.03211, 0.0);\n\n// RGB to YUV matrix\nmat3 rgb2yuv = mat3(0.2126, 0.7152, 0.0722,\n                    -0.09991, -0.33609, 0.43600,\n                    0.615, -0.5586, -0.05639);\n                    \nvec3 oklab2rgb(vec3 linear)\n{\n    const mat3 im1 = mat3(0.4121656120, 0.2118591070, 0.0883097947,\n                          0.5362752080, 0.6807189584, 0.2818474174,\n                          0.0514575653, 0.1074065790, 0.6302613616);\n                       \n    const mat3 im2 = mat3(+0.2104542553, +1.9779984951, +0.0259040371,\n                          +0.7936177850, -2.4285922050, +0.7827717662,\n                          -0.0040720468, +0.4505937099, -0.8086757660);\n                       \n    vec3 lms = im1 * linear;\n            \n    return im2 * (sign(lms) * pow(abs(lms), vec3(1.0/3.0)));\n}\n\nvec3 rgb2oklab(vec3 oklab)\n{\n    const mat3 m1 = mat3(+1.000000000, +1.000000000, +1.000000000,\n                         +0.396337777, -0.105561346, -0.089484178,\n                         +0.215803757, -0.063854173, -1.291485548);\n                       \n    const mat3 m2 = mat3(+4.076724529, -1.268143773, -0.004111989,\n                         -3.307216883, +2.609332323, -0.703476310,\n                         +0.230759054, -0.341134429, +1.706862569);\n    vec3 lms = m1 * oklab;\n    \n    return m2 * (lms * lms * lms);\n}\n\n    `,\n  M = () => `\n\nvec3 saturation(vec3 rgb, float adjustment) {\n    const vec3 W = vec3(0.2125, 0.7154, 0.0721);\n    vec3 intensity = vec3(dot(rgb, W));\n    return mix(intensity, rgb, adjustment);\n}\n\nfloat saturation(vec3 rgb)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(rgb.bg, K.wz), vec4(rgb.gb, K.xy), step(rgb.b, rgb.g));\n    vec4 q = mix(vec4(p.xyw, rgb.r), vec4(rgb.r, p.yzx), step(p.x, rgb.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return abs(6.0 * d + e);\n}\n\n// get saturation of a color in values between 0 and 1\nfloat getSaturation(vec3 color) {\n    float max = max(color.r, max(color.g, color.b));\n    float min = min(color.r, min(color.g, color.b));\n    return (max - min) / max;\n}\n    \nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n`,\n  k = t => {\n    t.id = E, t.href = \"https://neat.firecms.co\", t.target = \"_blank\", t.style.position = \"absolute\", t.style.display = \"block\", t.style.bottom = \"0\", t.style.right = \"0\", t.style.padding = \"10px\", t.style.color = \"#dcdcdc\", t.style.opacity = \"0.8\", t.style.fontFamily = \"sans-serif\", t.style.fontSize = \"16px\", t.style.fontWeight = \"bold\", t.style.textDecoration = \"none\", t.style.zIndex = \"10000\", t.innerHTML = \"NEAT\";\n  },\n  W = t => {\n    const e = t.parentElement?.getElementsByTagName(\"a\");\n    if (e) {\n      for (let i = 0; i < e.length; i++) if (e[i].id === E) {\n        k(e[i]);\n        return;\n      }\n    }\n    const o = document.createElement(\"a\");\n    k(o), t.parentElement?.appendChild(o);\n  };\nfunction G() {\n  const t = new Date(),\n    e = t.getMinutes(),\n    o = t.getSeconds();\n  return e * 60 + o;\n}\nfunction U(t = 6) {\n  const e = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  let o = \"\";\n  for (let i = 0; i < t; i++) {\n    const n = Math.floor(Math.random() * e.length);\n    o += e.charAt(n);\n  }\n  return o;\n}\nexport { X as NeatGradient };","map":{"version":3,"names":["g","_","T","C","V","r","Clock","E","U","X","_ref","_speed","_horizontalPressure","_verticalPressure","_waveFrequencyX","_waveFrequencyY","_waveAmplitude","_shadows","_highlights","_saturation","_brightness","_colorBlending","_colors","_wireframe","_backgroundColor","_backgroundAlpha","requestRef","sizeObserver","sceneState","constructor","e","ref","o","speed","i","horizontalPressure","n","verticalPressure","a","waveFrequencyX","c","waveFrequencyY","u","waveAmplitude","x","colors","l","highlights","v","shadows","m","colorSaturation","p","colorBrightness","w","colorBlending","b","wireframe","I","backgroundColor","N","backgroundAlpha","O","resolution","R","seed","q","destroy","bind","_initScene","_buildMaterial","z","G","S","render","renderer","h","camera","f","scene","d","meshes","y","Math","floor","W","setClearColor","forEach","s","K","width","D","height","L","map","P","is_active","enabled","color","Color","influence","Array","from","length","getDelta","material","uniforms","u_time","value","u_resolution","Vector2","u_color_pressure","u_wave_frequency_x","u_wave_frequency_y","u_wave_amplitude","u_plane_width","u_plane_height","u_color_blending","u_colors","u_colors_count","u_shadows","u_highlights","u_saturation","u_brightness","requestAnimationFrame","B","setSize","domElement","clientWidth","clientHeight","F","ResizeObserver","observe","cancelAnimationFrame","disconnect","WebGLRenderer","alpha","canvas","Scene","PlaneGeometry","Mesh","rotation","PI","position","push","add","OrthographicCamera","ShaderMaterial","vertexShader","A","H","M","j","fragmentShader","Y","t","sqrt","min","max","left","right","top","bottom","near","far","updateProjectionMatrix","PerspectiveCamera","aspect","buildUniforms","buildNoise","buildColorFunctions","k","id","href","target","style","display","padding","opacity","fontFamily","fontSize","fontWeight","textDecoration","zIndex","innerHTML","parentElement","getElementsByTagName","document","createElement","appendChild","Date","getMinutes","getSeconds","random","charAt"],"sources":["../src/NeatGradient.ts"],"sourcesContent":["import * as THREE from \"three\";\n\nconst PLANE_WIDTH = 50;\nconst PLANE_HEIGHT = 80;\n\nconst WIREFRAME = true;\nconst COLORS_COUNT = 5;\n\nconst clock = new THREE.Clock();\n\nconst LINK_ID = generateRandomString();\n\ntype SceneState = {\n    renderer: THREE.WebGLRenderer,\n    camera: THREE.Camera,\n    scene: THREE.Scene,\n    meshes: THREE.Mesh[],\n    resolution: number\n}\n\nexport type NeatConfig = {\n    resolution?: number;\n    speed?: number;\n    horizontalPressure?: number;\n    verticalPressure?: number;\n    waveFrequencyX?: number;\n    waveFrequencyY?: number;\n    waveAmplitude?: number;\n    highlights?: number;\n    shadows?: number;\n    colorSaturation?: number;\n    colorBrightness?: number;\n    colors: NeatColor[];\n    colorBlending?: number;\n    wireframe?: boolean;\n    backgroundColor?: string;\n    backgroundAlpha?: number;\n};\n\nexport type NeatColor = {\n    color: string;\n    enabled: boolean;\n    /**\n     * Value from 0 to 1\n     */\n    influence?: number;\n}\n\nexport type NeatController = {\n    destroy: () => void;\n}\n\nexport class NeatGradient implements NeatController {\n\n    private _ref: HTMLCanvasElement;\n\n    private _speed: number = -1;\n\n    private _horizontalPressure: number = -1;\n    private _verticalPressure: number = -1;\n\n    private _waveFrequencyX: number = -1;\n    private _waveFrequencyY: number = -1;\n    private _waveAmplitude: number = -1;\n\n    private _shadows: number = -1;\n    private _highlights: number = -1;\n    private _saturation: number = -1;\n    private _brightness: number = -1;\n\n    private _colorBlending: number = -1;\n\n    private _colors: NeatColor[] = [];\n    private _wireframe: boolean = false;\n\n    private _backgroundColor: string = \"#FFFFFF\";\n    private _backgroundAlpha: number = 1.0;\n\n    private requestRef: number = -1;\n    private sizeObserver: ResizeObserver;\n    private sceneState: SceneState;\n\n    constructor(config: NeatConfig & { ref: HTMLCanvasElement, resolution?: number, seed?: number }) {\n\n        const {\n            ref,\n            speed = 4,\n            horizontalPressure = 3,\n            verticalPressure = 3,\n            waveFrequencyX = 5,\n            waveFrequencyY = 5,\n            waveAmplitude = 3,\n            colors,\n            highlights = 4,\n            shadows = 4,\n            colorSaturation = 0,\n            colorBrightness = 1,\n            colorBlending = 5,\n            wireframe = false,\n            backgroundColor = \"#FFFFFF\",\n            backgroundAlpha = 1.0,\n            resolution = 1,\n            seed\n        } = config;\n\n\n        this._ref = ref;\n\n        this.destroy = this.destroy.bind(this);\n        this._initScene = this._initScene.bind(this);\n        this._buildMaterial = this._buildMaterial.bind(this);\n\n        this.speed = speed;\n        this.horizontalPressure = horizontalPressure;\n        this.verticalPressure = verticalPressure;\n        this.waveFrequencyX = waveFrequencyX;\n        this.waveFrequencyY = waveFrequencyY;\n        this.waveAmplitude = waveAmplitude;\n        this.colorBlending = colorBlending;\n        this.colors = colors;\n        this.shadows = shadows;\n        this.highlights = highlights;\n        this.colorSaturation = colorSaturation;\n        this.colorBrightness = colorBrightness;\n        this.wireframe = wireframe;\n        this.backgroundColor = backgroundColor;\n        this.backgroundAlpha = backgroundAlpha;\n\n        this.sceneState = this._initScene(resolution);\n\n        let tick = seed !== undefined ? seed : getElapsedSecondsInLastHour();\n        const render = () => {\n\n            const { renderer, camera, scene, meshes } = this.sceneState;\n            if (Math.floor(tick * 10) % 5 === 0) {\n                addNeatLink(ref);\n            }\n\n            renderer.setClearColor(this._backgroundColor, this._backgroundAlpha);\n            meshes.forEach((mesh) => {\n\n                const width = this._ref.width,\n                    height = this._ref.height;\n\n                const colors = [\n                    ...this._colors.map(color => ({\n                        is_active: color.enabled,\n                        color: new THREE.Color(color.color),\n                        influence: color.influence\n                    })),\n                    ...Array.from({ length: COLORS_COUNT - this._colors.length }).map(() => ({\n                        is_active: false,\n                        color: new THREE.Color(0x000000)\n                    }))\n                ];\n\n                tick += clock.getDelta() * this._speed;\n                // @ts-ignore\n                mesh.material.uniforms.u_time.value = tick;\n                // @ts-ignore\n                mesh.material.uniforms.u_resolution = { value: new THREE.Vector2(width, height) };\n                // @ts-ignore\n                mesh.material.uniforms.u_color_pressure = { value: new THREE.Vector2(this._horizontalPressure, this._verticalPressure) };\n                // @ts-ignore\n                mesh.material.uniforms.u_wave_frequency_x = { value: this._waveFrequencyX };\n                // @ts-ignore\n                mesh.material.uniforms.u_wave_frequency_y = { value: this._waveFrequencyY };\n                // @ts-ignore\n                mesh.material.uniforms.u_wave_amplitude = { value: this._waveAmplitude };\n                // @ts-ignore\n                mesh.material.uniforms.u_plane_width = { value: PLANE_WIDTH };\n                // @ts-ignore\n                mesh.material.uniforms.u_plane_height = { value: PLANE_HEIGHT };\n                // @ts-ignore\n                mesh.material.uniforms.u_color_blending = { value: this._colorBlending };\n                // @ts-ignore\n                mesh.material.uniforms.u_colors = { value: colors };\n                // @ts-ignore\n                mesh.material.uniforms.u_colors_count = { value: COLORS_COUNT };\n                // @ts-ignore\n                mesh.material.uniforms.u_shadows = { value: this._shadows };\n                // @ts-ignore\n                mesh.material.uniforms.u_highlights = { value: this._highlights };\n                // @ts-ignore\n                mesh.material.uniforms.u_saturation = { value: this._saturation };\n                // @ts-ignore\n                mesh.material.uniforms.u_brightness = { value: this._brightness };\n                // @ts-ignore\n                mesh.material.wireframe = this._wireframe;\n            });\n\n            renderer.render(scene, camera);\n            this.requestRef = requestAnimationFrame(render);\n        };\n\n        const setSize = () => {\n\n            const { renderer } = this.sceneState;\n            const canvas = renderer.domElement;\n            const width = canvas.clientWidth;\n            const height = canvas.clientHeight;\n\n            this.sceneState.renderer.setSize(width, height, false);\n            updateCamera(this.sceneState.camera, width, height);\n        };\n\n        this.sizeObserver = new ResizeObserver(entries => {\n            setSize();\n        });\n\n        this.sizeObserver.observe(ref);\n\n\n        render();\n    }\n\n    destroy() {\n        if (this) {\n            cancelAnimationFrame(this.requestRef);\n            this.sizeObserver.disconnect();\n        }\n    }\n\n    set speed(speed: number) {\n        this._speed = speed / 20;\n    }\n\n    set horizontalPressure(horizontalPressure: number) {\n        this._horizontalPressure = horizontalPressure / 4;\n    }\n\n    set verticalPressure(verticalPressure: number) {\n        this._verticalPressure = verticalPressure / 4;\n    }\n\n    set waveFrequencyX(waveFrequencyX: number) {\n        this._waveFrequencyX = waveFrequencyX * 0.04;\n    }\n\n    set waveFrequencyY(waveFrequencyY: number) {\n        this._waveFrequencyY = waveFrequencyY * 0.04;\n    }\n\n    set waveAmplitude(waveAmplitude: number) {\n        this._waveAmplitude = waveAmplitude * .75;\n    }\n\n    set colors(colors: NeatColor[]) {\n        this._colors = colors;\n    }\n\n    set highlights(highlights: number) {\n        this._highlights = highlights / 100;\n    }\n\n    set shadows(shadows: number) {\n        this._shadows = shadows / 100;\n    }\n\n    set colorSaturation(colorSaturation: number) {\n        this._saturation = colorSaturation / 10;\n    }\n\n    set colorBrightness(colorBrightness: number) {\n        this._brightness = colorBrightness;\n    }\n\n    set colorBlending(colorBlending: number) {\n        this._colorBlending = colorBlending / 10;\n    }\n\n    set wireframe(wireframe: boolean) {\n        this._wireframe = wireframe;\n    }\n\n    set resolution(resolution: number) {\n        this.sceneState = this._initScene(resolution);\n    }\n\n    set backgroundColor(backgroundColor: string) {\n        this._backgroundColor = backgroundColor;\n    }\n\n    set backgroundAlpha(backgroundAlpha: number) {\n        this._backgroundAlpha = backgroundAlpha;\n    }\n\n    _initScene(resolution: number): SceneState {\n\n        const width = this._ref.width,\n            height = this._ref.height;\n\n        const renderer = new THREE.WebGLRenderer({\n            // antialias: true,\n            alpha: true,\n            canvas: this._ref\n        });\n\n        renderer.setClearColor(0xFF0000, .5);\n        renderer.setSize(width, height, false);\n\n        const meshes: THREE.Mesh[] = [];\n\n        const scene = new THREE.Scene();\n\n        const material = this._buildMaterial(width, height);\n\n        const geo = new THREE.PlaneGeometry(PLANE_WIDTH, PLANE_HEIGHT, 240 * resolution, 240 * resolution);\n        const plane = new THREE.Mesh(geo, material);\n        plane.rotation.x = -Math.PI / 3.5;\n        plane.position.z = -1;\n        meshes.push(plane);\n        scene.add(plane);\n\n        const camera = new THREE.OrthographicCamera(0.0, 0.0, 0.0, 0.0, 0.0, 0.0);\n        // const camera = new THREE.PerspectiveCamera( 1000, window.innerWidth / window.innerHeight, 1, 1000000 );\n        camera.position.z = 5;\n        updateCamera(camera, width, height);\n\n        return {\n            renderer,\n            camera,\n            scene,\n            meshes,\n            resolution\n        };\n    }\n\n    _buildMaterial(width: number, height: number) {\n\n        const colors = [\n            ...this._colors.map(color => ({\n                is_active: color.enabled,\n                color: new THREE.Color(color.color),\n                influence: color.influence\n            })),\n            ...Array.from({ length: COLORS_COUNT - this._colors.length }).map(() => ({\n                is_active: false,\n                color: new THREE.Color(0x000000)\n            }))\n        ];\n\n        const uniforms = {\n            u_time: { value: 0 },\n            u_color_pressure: { value: new THREE.Vector2(this._horizontalPressure, this._verticalPressure) },\n            u_wave_frequency_x: { value: this._waveFrequencyX },\n            u_wave_frequency_y: { value: this._waveFrequencyY },\n            u_wave_amplitude: { value: this._waveAmplitude },\n            u_resolution: { value: new THREE.Vector2(width, height) },\n            u_colors: { value: colors },\n            u_colors_count: { value: this._colors.length },\n            u_plane_width: { value: PLANE_WIDTH },\n            u_plane_height: { value: PLANE_HEIGHT },\n            u_shadows: { value: this._shadows },\n            u_highlights: { value: this._highlights },\n        };\n\n        const material = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: buildUniforms() + buildNoise() + buildColorFunctions() + buildVertexShader(),\n            fragmentShader: buildUniforms() + buildColorFunctions() + buildFragmentShader()\n        });\n\n        material.wireframe = WIREFRAME;\n        return material;\n    }\n\n\n}\n\nfunction updateCamera(camera: THREE.Camera, width: number, height: number) {\n\n    const viewPortAreaRatio = 1000000;\n    const areaViewPort = width * height;\n    const targetPlaneArea =\n        areaViewPort / viewPortAreaRatio *\n        PLANE_WIDTH * PLANE_HEIGHT / 1.5;\n\n    const ratio = width / height;\n\n    const targetWidth = Math.sqrt(targetPlaneArea * ratio);\n    const targetHeight = targetPlaneArea / targetWidth;\n\n    const left = -PLANE_WIDTH / 2;\n    const right = Math.min((left + targetWidth) / 1.5, PLANE_WIDTH / 2);\n\n    const top = PLANE_HEIGHT / 4;\n    const bottom = Math.max((top - targetHeight) / 2, -PLANE_HEIGHT / 4);\n\n    const near = -100;\n    const far = 1000;\n    if (camera instanceof THREE.OrthographicCamera) {\n        camera.left = left;\n        camera.right = right;\n        camera.top = top;\n        camera.bottom = bottom;\n        camera.near = near;\n        camera.far = far;\n        camera.updateProjectionMatrix();\n    } else if (camera instanceof THREE.PerspectiveCamera) {\n        camera.aspect = width / height;\n        camera.updateProjectionMatrix();\n    }\n\n}\n\n\nfunction buildVertexShader() {\n    return `\n\nvoid main() {\n\n    vUv = uv;\n\n    v_displacement_amount = cnoise( vec3(\n        u_wave_frequency_x * position.x + u_time,\n        u_wave_frequency_y * position.y + u_time,\n        u_time\n    ));\n    \n    vec3 color;\n\n    // float t = mod(u_base_color, 100.0);\n    color = u_colors[0].color;\n    \n    vec2 noise_cord = vUv * u_color_pressure;\n    \n    const float minNoise = .0;\n    const float maxNoise = .9;\n    \n    for (int i = 1; i < u_colors_count; i++) {\n    \n        if(u_colors[i].is_active == 1.0){\n            float noiseFlow = (1. + float(i)) / 30.;\n            float noiseSpeed = (1. + float(i)) * 0.11;\n            float noiseSeed = 13. + float(i) * 7.;\n            \n            float noise = snoise(\n                vec3(\n                    noise_cord.x * u_color_pressure.x + u_time * noiseFlow * 2.,\n                    noise_cord.y * u_color_pressure.y,\n                    u_time * noiseSpeed\n                ) + noiseSeed\n            );\n            \n            noise = clamp(minNoise, maxNoise + float(i) * 0.02, noise);\n            vec3 nextColor = u_colors[i].color;\n            \n            // vec3 colorOklab = oklab2rgb(color);\n            // vec3 nextColorOklab = oklab2rgb(nextColor);\n            // vec3 mixColor = mix(colorOklab, nextColorOklab, smoothstep(0.0, u_color_blending, noise));\n            //\n            // color = rgb2oklab(mixColor);\n            \n            color = mix(color, nextColor, smoothstep(0.0, u_color_blending, noise));\n        }\n        \n    }\n    \n    v_color = color;\n    \n    vec3 newPosition = position + normal * v_displacement_amount * u_wave_amplitude;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( newPosition, 1.0 );\n    \n    v_new_position = gl_Position;\n}\n`;\n}\n\nfunction buildFragmentShader() {\n    return `\n\nvoid main(){\n    vec3 color = v_color;\n    \n    color.rgb += pow(v_displacement_amount, 1.0) * u_highlights;\n    color.rgb -= pow(1.0 - v_displacement_amount, 2.0) * u_shadows;\n    color = saturation(color, 1.0 + u_saturation);\n    color = color * u_brightness;\n    \n    gl_FragColor = vec4(color,1.0);\n}\n`;\n}\n\nconst buildUniforms = () => `\nprecision highp float;\n\nstruct Color {\n    float is_active;\n    vec3 color;\n    float value;\n};\n\nuniform float u_time;\n\nuniform float u_wave_amplitude;\nuniform float u_wave_frequency_x;\nuniform float u_wave_frequency_y;\n\nuniform vec2 u_color_pressure;\n\nuniform float u_plane_width;\nuniform float u_plane_height;\n\nuniform float u_shadows;\nuniform float u_highlights;\nuniform float u_saturation;\nuniform float u_brightness;\n\nuniform float u_color_blending;\n\nuniform int u_colors_count;\nuniform Color u_colors[5];\nuniform vec2 u_resolution;\n\nvarying vec2 vUv;\nvarying vec4 v_new_position;\nvarying vec3 v_color;\nvarying float v_displacement_amount;\n\n    `;\n\nconst buildNoise = () => `\n\nvec3 mod289(vec3 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec3 fade(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\nfloat snoise(vec3 v)\n{\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i);\n  vec4 p = permute( permute( permute(\n            i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n          + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n          + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\n// Classic Perlin noise\nfloat cnoise(vec3 P)\n{\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n  return 2.2 * n_xyz;\n}\n\n// YUV to RGB matrix\nmat3 yuv2rgb = mat3(1.0, 0.0, 1.13983,\n                    1.0, -0.39465, -0.58060,\n                    1.0, 2.03211, 0.0);\n\n// RGB to YUV matrix\nmat3 rgb2yuv = mat3(0.2126, 0.7152, 0.0722,\n                    -0.09991, -0.33609, 0.43600,\n                    0.615, -0.5586, -0.05639);\n                    \nvec3 oklab2rgb(vec3 linear)\n{\n    const mat3 im1 = mat3(0.4121656120, 0.2118591070, 0.0883097947,\n                          0.5362752080, 0.6807189584, 0.2818474174,\n                          0.0514575653, 0.1074065790, 0.6302613616);\n                       \n    const mat3 im2 = mat3(+0.2104542553, +1.9779984951, +0.0259040371,\n                          +0.7936177850, -2.4285922050, +0.7827717662,\n                          -0.0040720468, +0.4505937099, -0.8086757660);\n                       \n    vec3 lms = im1 * linear;\n            \n    return im2 * (sign(lms) * pow(abs(lms), vec3(1.0/3.0)));\n}\n\nvec3 rgb2oklab(vec3 oklab)\n{\n    const mat3 m1 = mat3(+1.000000000, +1.000000000, +1.000000000,\n                         +0.396337777, -0.105561346, -0.089484178,\n                         +0.215803757, -0.063854173, -1.291485548);\n                       \n    const mat3 m2 = mat3(+4.076724529, -1.268143773, -0.004111989,\n                         -3.307216883, +2.609332323, -0.703476310,\n                         +0.230759054, -0.341134429, +1.706862569);\n    vec3 lms = m1 * oklab;\n    \n    return m2 * (lms * lms * lms);\n}\n\n    `;\n\nconst buildColorFunctions = () => `\n\nvec3 saturation(vec3 rgb, float adjustment) {\n    const vec3 W = vec3(0.2125, 0.7154, 0.0721);\n    vec3 intensity = vec3(dot(rgb, W));\n    return mix(intensity, rgb, adjustment);\n}\n\nfloat saturation(vec3 rgb)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(rgb.bg, K.wz), vec4(rgb.gb, K.xy), step(rgb.b, rgb.g));\n    vec4 q = mix(vec4(p.xyw, rgb.r), vec4(rgb.r, p.yzx), step(p.x, rgb.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return abs(6.0 * d + e);\n}\n\n// get saturation of a color in values between 0 and 1\nfloat getSaturation(vec3 color) {\n    float max = max(color.r, max(color.g, color.b));\n    float min = min(color.r, min(color.g, color.b));\n    return (max - min) / max;\n}\n    \nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n`;\n\n\nconst setLinkStyles = (link: HTMLAnchorElement) => {\n    link.id = LINK_ID;\n    link.href = \"https://neat.firecms.co\";\n    link.target = \"_blank\";\n    link.style.position = \"absolute\";\n    link.style.display = \"block\";\n    link.style.bottom = \"0\";\n    link.style.right = \"0\";\n    link.style.padding = \"10px\";\n    link.style.color = \"#dcdcdc\";\n    link.style.opacity = \"0.8\";\n    link.style.fontFamily = \"sans-serif\";\n    link.style.fontSize = \"16px\";\n    link.style.fontWeight = \"bold\";\n    link.style.textDecoration = \"none\";\n    link.style.zIndex = \"10000\";\n    link.innerHTML = \"NEAT\";\n}\n\nconst addNeatLink = (ref: HTMLCanvasElement) => {\n    const existingLinks = ref.parentElement?.getElementsByTagName(\"a\");\n    if (existingLinks) {\n        for (let i = 0; i < existingLinks.length; i++) {\n            if (existingLinks[i].id === LINK_ID) {\n                setLinkStyles(existingLinks[i]);\n                return;\n            }\n        }\n    }\n    const link = document.createElement(\"a\");\n    setLinkStyles(link);\n    ref.parentElement?.appendChild(link);\n}\n\nfunction getElapsedSecondsInLastHour() {\n    const now = new Date();\n    const minutes = now.getMinutes();\n    const seconds = now.getSeconds();\n    return (minutes * 60) + seconds;\n}\n\nfunction generateRandomString(length: number = 6): string {\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let result = '';\n    for (let i = 0; i < length; i++) {\n        const randomIndex = Math.floor(Math.random() * characters.length);\n        result += characters.charAt(randomIndex);\n    }\n    return result;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}